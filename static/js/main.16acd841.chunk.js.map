{"version":3,"sources":["store/tasksData.tsx","components/validateFields.tsx","components/ErrorMassege.tsx","components/TaskForm.tsx","components/ModalConfirmDelete.tsx","components/EditableTask.tsx","components/TaskReadOnly.tsx","components/Tasks.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["tasksData","id","name","type","description","date","modal","makeAutoObservable","this","task","push","filter","map","newValue","validateFields","values","errors","StyledAlert","styled","div","StyledBody","ErrorMassege","errorText","StyledDiv","StyledInput","input","StyledSelect","select","StyledForm","form","StyledCreateButton","button","TaskForm","observer","useState","Date","now","setTask","setErrors","handleChange","event","prev","target","value","onSubmit","preventDefault","errorsField","Object","keys","length","addTask","placeholder","onChange","disabled","StyledModal","StyledText","p","StyledDeleteButton","StyledCanselButton","ModalConfirmDelete","props","onClick","toggleDel","toggleClose","StyleEditedTask","tr","StyledSaveButton","EditableTask","index","setHookId","changeTask","setChangeTask","handleChangedValue","cValue","changeTaskData","removeTask","showModal","StyleTask","StyledEditButton","TaskReadOnly","handleEditId","StyleHeader","StyledTable","table","Tasks","editableId","setEditableId","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAyDe,M,WApCX,aAAc,yBATdA,UAA0B,CAAC,CACvBC,GAAI,EACJC,KAAM,QACNC,KAAM,MACNC,YAAa,SACbC,KAAM,aACNC,OAAO,IAIPC,YAAmBC,M,2CAGvB,SAAQC,GACJD,KAAKR,UAAUU,KAAKD,K,wBAGxB,SAAWR,GACPO,KAAKR,UAAYQ,KAAKR,UAAUW,QAAO,SAAAF,GAAI,OAAIA,EAAKR,KAAOA,O,uBAG/D,SAAUA,GACNO,KAAKR,UAAUY,KAAI,SAAAH,GAIf,OAHIA,EAAKR,KAAOA,IACZQ,EAAKH,OAASG,EAAKH,OAEhBG,O,4BAIf,SAAeR,EAAYY,GACvBL,KAAKR,UAAUY,KAAI,SAAAH,GAOf,OANIA,EAAKR,KAAOA,IACZQ,EAAKP,KAAOW,EAASX,KACrBO,EAAKN,KAAOU,EAASV,KACrBM,EAAKL,YAAcS,EAAST,YAC5BK,EAAKJ,KAAOQ,EAASR,MAElBI,S,aCzBJK,EAjBQ,SAACC,GAEpB,IAAIC,EAAiB,GAYrB,OATID,EAAOb,OACPc,EAAOd,KAAO,uBAEda,EAAOZ,OACPa,EAAOb,KAAO,uBAEdY,EAAOV,OACPW,EAAOX,KAAO,uBAEXW,G,OCnBLC,EAAcC,IAAOC,IAAV,gJAQXC,EAAaF,IAAOC,IAAV,iNAuBDE,EATM,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,UAGnB,OACA,cAACL,EAAD,UACI,cAACG,EAAD,UAAaE,OCrBfC,EAAYL,IAAOC,IAAV,mHAOTK,EAAcN,IAAOO,MAAV,4MAUXC,EAAeR,IAAOS,OAAV,4MAUZC,EAAaV,IAAOW,KAAV,uSAcVC,EAAqBZ,IAAOa,OAAV,oRAqHTC,EAvGYC,aAAU,WACjC,MAAwBC,mBAAS,CAC7BjC,GAAIkC,KAAKC,MACTlC,KAAM,GACNC,KAAM,GACNC,YAAa,GACbC,KAAM,GACNC,OAAO,IANX,mBAAOG,EAAP,KAAa4B,EAAb,KAUA,EAA2BH,mBAAkB,IAA7C,mBAAOlB,EAAP,KAAesB,EAAf,KAIMC,EAAe,SAACC,GAClBH,GAAQ,SAAAI,GACJ,kCACOA,GADP,kBAEKD,EAAME,OAAOxC,KAAOsC,EAAME,OAAOC,YA6B9C,OACI,eAACf,EAAD,CAAYgB,SAxBK,SAACJ,GAClBA,EAAMK,iBACN,IAAMC,EAAchC,EAAeL,GACnC6B,EAAUQ,GAGLC,OAAOC,KAAKF,GAAaG,SAC1BjD,EAAUkD,QAAQzC,GAClB4B,EAAQ,CACJpC,GAAIkC,KAAKC,MACTlC,KAAM,GACNC,KAAM,GACNC,YAAa,GACbC,KAAM,GACNC,OAAO,MAUf,UACI,eAACiB,EAAD,WACI,cAACC,EAAD,CACIrB,KAAK,OACLD,KAAK,OACLiD,YAAY,OACZR,MAAOlC,EAAKP,KACZkD,SAAUb,IAIbvB,EAAOd,KAAQ,cAAC,EAAD,CAAcoB,UAAWN,EAAOd,OAAU,QAE9D,eAACqB,EAAD,WACI,eAACG,EAAD,CACIxB,KAAK,OACLyC,MAAOlC,EAAKN,KACZiD,SAAUb,EAHd,UAII,wBAAQI,MAAM,GAAGU,UAAQ,EAAzB,8BACA,yCACA,iDACA,6CAEHrC,EAAOb,MAAQ,cAAC,EAAD,CAAcmB,UAAWN,EAAOb,UAEpD,cAACoB,EAAD,UACI,cAACC,EAAD,CACIrB,KAAK,OACLD,KAAK,cACLyC,MAAOlC,EAAKL,YACZH,GAAG,cACHkD,YAAY,cACZC,SAAUb,MAIlB,eAAChB,EAAD,WACI,cAACC,EAAD,CACIrB,KAAK,OACLD,KAAK,OACLD,GAAG,OACH0C,MAAOlC,EAAKJ,KACZ+C,SAAUb,IAEjBvB,EAAOX,MAAQ,cAAC,EAAD,CAAciB,UAAWN,EAAOX,UAEhD,cAACkB,EAAD,UACA,cAACO,EAAD,CAAoB3B,KAAK,SAAzB,4BCvJNmD,EAAcpC,IAAOC,IAAV,6MAWXoC,EAAarC,IAAOsC,EAAV,sDAKVC,EAAqBvC,IAAOa,OAAV,gPAalB2B,EAAqBxC,IAAOa,OAAV,0OA0BT4B,EAZY,SAACC,GACxB,OACI,eAACN,EAAD,WACI,cAACC,EAAD,8BACA,gCACI,cAACE,EAAD,CAAoBI,QAAS,WAAKD,EAAME,aAAxC,oBACA,cAACJ,EAAD,CAAoBG,QAAS,WAAKD,EAAMG,eAAxC,2BCjDVvC,GAAcN,IAAOO,MAAV,gLASXC,GAAeR,IAAOS,OAAV,gLASZqC,GAAkB9C,IAAO+C,GAAV,8NAYfC,GAAmBhD,IAAOa,OAAV,mQAahB0B,GAAqBvC,IAAOa,OAAV,wRA0GToC,GAtFMlC,aAAU,YAA8C,IAA5CxB,EAA2C,EAA3CA,KAAK2D,EAAsC,EAAtCA,MAAMC,EAAgC,EAAhCA,UACxC,EAAoCnC,mBAASzB,GAA7C,mBAAO6D,EAAP,KAAmBC,EAAnB,KAEA,EAA2BrC,mBAAkB,IAA7C,mBAAOlB,EAAP,KAAesB,EAAf,KAeA,SAASkC,EAAmBhC,GACxB,IAAMiC,EAAQjC,EAAME,OAAOC,MAC3B4B,GAAc,SAAC9B,GACX,kCACOA,GADP,kBAEKD,EAAME,OAAOxC,KAAMuE,OAMhC,OACI,eAACT,GAAD,WACI,6BAAKI,EAAM,IACX,+BACI,cAAC,GAAD,CACIjE,KAAK,OACLD,KAAK,OACLiD,YAAY,OACZR,MAAO2B,EAAWpE,KAClBkD,SAAUoB,IAEbxD,EAAOd,KAAQ,cAAC,EAAD,CAAcoB,UAAWN,EAAOd,OAAU,QAE9D,+BACI,eAAC,GAAD,CACIA,KAAK,OACLyC,MAAO2B,EAAWnE,KAClBiD,SAAUoB,EAHd,UAMI,wBAAQ7B,MAAM,GAAGU,UAAQ,EAAzB,8BACA,yCACA,iDACA,6CAEHrC,EAAOb,KAAQ,cAAC,EAAD,CAAcmB,UAAWN,EAAOb,OAAU,QAE9D,6BACI,cAAC,GAAD,CACIA,KAAK,OACLD,KAAK,cACLD,GAAG,kBACHkD,YAAY,cACZR,MAAO2B,EAAWlE,YAClBgD,SAAUoB,MAIlB,+BACI,cAAC,GAAD,CACIrE,KAAK,OACLD,KAAK,OACLD,GAAG,OACH0C,MAAO2B,EAAWjE,KAClB+C,SAAUoB,IAGbxD,EAAOX,KAAQ,cAAC,EAAD,CAAciB,UAAWN,EAAOX,OAAU,QAE9D,6BAAI,cAAC6D,GAAD,CAAkB/D,KAAK,SAAS0D,QAzE5C,SAAoBrB,GAChBA,EAAMK,iBACN,IAAMC,EAAchC,EAAewD,GACnChC,EAAUQ,GAELC,OAAOC,KAAKF,GAAaG,SAC1BjD,EAAU0E,eAAejE,EAAKR,GAAIqE,GAClCD,MAkEI,oBACJ,6BACM5D,EAAKH,MAAQ,cAAC,EAAD,CAAoBwD,UAAa,kBAAI9D,EAAU2E,WAAWlE,EAAKR,KAAK8D,YAAa,WAAK/D,EAAU4E,UAAUnE,EAAKR,OAAU,cAAC,GAAD,CAAoB4D,QAAW,WAAK7D,EAAU4E,UAAUnE,EAAKR,KAA7D,4BClJlJ4E,GAAY3D,IAAO+C,GAAV,wNAWTR,GAAqBvC,IAAOa,OAAV,wRAalB+C,GAAmB5D,IAAOa,OAAV,yRAqCPgD,GAhBM9C,aAAU,YAAkD,IAAhDmC,EAA+C,EAA/CA,MAAM3D,EAAyC,EAAzCA,KAAMuE,EAAmC,EAAnCA,aACzC,OACQ,eAACH,GAAD,WACQ,6BAAKT,EAAM,IACX,6BAAK3D,EAAKP,OACV,6BAAKO,EAAKN,OACV,6BAAKM,EAAKL,cACV,6BAAKK,EAAKJ,OACV,6BAAI,cAACyE,GAAD,CAAkBjB,QAASmB,EAA3B,oBACJ,6BACMvE,EAAKH,MAAQ,cAAC,EAAD,CAAoBwD,UAAa,kBAAI9D,EAAU2E,WAAWlE,EAAKR,KAAK8D,YAAa,WAAK/D,EAAU4E,UAAUnE,EAAKR,OAAU,cAAC,GAAD,CAAoB4D,QAAW,WAAK7D,EAAU4E,UAAUnE,EAAKR,KAA7D,4BCtD1JgF,GAAc/D,IAAO+C,GAAV,2MAUXiB,GAAchE,IAAOiE,MAAV,sDAqCFC,GAhCSnD,aAAU,WAC9B,MAAoCC,oBAAU,GAA9C,mBAAOmD,EAAP,KAAmBC,EAAnB,KAMH,OACI,eAACJ,GAAD,WACG,gCACI,eAACD,GAAD,WACI,qCACA,sCACA,sCACA,6CACA,sCACA,sCACA,6CAGPjF,EAAUA,UAAUY,KAAI,SAACH,EAAK2D,GAC3B,OACI,gCACEiB,IAAe5E,EAAKR,GAAM,cAAC,GAAD,CAAemE,MAAOA,EAAO3D,KAAMA,EAAO4D,UAAY,kBAAIiB,GAAe,MAAS,cAAC,GAAD,CAAelB,MAASA,EAAO3D,KAAMA,EAAMuE,aAAe,kBApBpL,SAAsBvE,GAClB6E,EAAc7E,EAAKR,IAmBiK+E,CAAavE,OAD7K2D,YC7BbmB,OAVf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,+CACA,cAAC,EAAD,IACA,cAAC,GAAD,QCISC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.16acd841.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\nexport interface ITask{\n    id: number;\n    name :string;\n    type: string;\n    description: string;\n    date: string;\n    modal:boolean;\n}\n\nclass TasksData {\n    tasksData: Array<ITask> = [{\n        id: 0,\n        name :\"first\",\n        type: 'new',\n        description: 'string',\n        date: '2021-08-09', \n        modal: false,\n    }]\n\n    constructor(){\n        makeAutoObservable(this);\n    }\n\n    addTask(task:ITask){\n        this.tasksData.push(task)\n    }\n\n    removeTask(id:number){\n        this.tasksData = this.tasksData.filter(task => task.id !== id)\n    }\n    \n    showModal(id:number){\n        this.tasksData.map(task => {\n            if (task.id === id){\n                task.modal = !task.modal\n            }\n            return task\n        })\n    }\n\n    changeTaskData(id:number , newValue:ITask){\n        this.tasksData.map(task => {\n            if (task.id === id){\n                task.name = newValue.name\n                task.type = newValue.type\n                task.description = newValue.description\n                task.date = newValue.date\n            }\n            return task\n        })\n    }\n\n}\n\n\nexport default new TasksData();","import { ITask } from \"../store/tasksData\";\n\nexport interface IErrors{\n    name?:string;\n    type?:string;\n    date?:string;\n}\n\nconst validateFields = (values:ITask) =>{\n\n    let errors:IErrors = {\n       };\n\n    if(!values.name){\n        errors.name = 'Please, enter name!'\n    }\n    if(!values.type){\n        errors.type = 'Please, enter type!'\n    }\n    if(!values.date){\n        errors.date = 'Please, enter date!'\n    }\n    return errors;\n}\n\nexport default validateFields;","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledAlert = styled.div`\n    text-align:center;\n    justify-content: center;\n    display: flex;\n    width:100%;\n    position: relative;\n`\n\nconst StyledBody = styled.div`\n    width:100%;\n    \n    background-color: #f3a0a8;\n    border: 1px solid #b02a37;\n    margin: 0;\n    border-radius: .25rem;  \n    font-size: .5rem;\n    position: absolute;\n`\ninterface IErrorText{\n    errorText: string;\n}\n\nconst ErrorMassege = ({errorText}:IErrorText) =>{\n    \n\n    return (\n    <StyledAlert>\n        <StyledBody>{errorText}</StyledBody>\n    </StyledAlert>)\n}\n\nexport default ErrorMassege;","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport tasksData from '../store/tasksData'\nimport styled from \"styled-components\";\nimport validateFields, { IErrors } from \"./validateFields\";\nimport ErrorMassege from \"./ErrorMassege\";\n\n\nconst StyledDiv = styled.div`\ndisplay:flex;\njustify-content: center;\nalign-items:center;\nflex-direction: column;\n`\n\nconst StyledInput = styled.input`\n    padding: .25rem .5rem;\n    font-size: .875rem;\n    border-radius: .2rem;\n    background-color: #fff;\n    border: 1px solid #ced4da;\n    width:90%;\n    height: 25px;\n`\n\nconst StyledSelect = styled.select`\n    padding: .25rem .5rem;\n    font-size: .875rem;\n    border-radius: .2rem;\n    background-color: #fff;\n    border: 1px solid #ced4da;\n    width:90%;\n    height: 35px;\n`\n\nconst StyledForm = styled.form`\n    width: 90%;\n    box-sizing:border-box;\n    justify-content:center;\n    display: grid;\n    grid-template-columns: repeat(5, 1fr);\n    column-gap: 20px;\n    margin: 20px auto;\n    padding: 20px;\n    border: 1px solid #dee2e6;\n    border-radius: .25rem;\n\n`\n\nconst StyledCreateButton = styled.button`\n    color: #fff;\n    background-color: #198754;\n    border-color: #198754;\n    border-radius: .25rem;\n    margin 5px;\n    width:100%;\n    height: 35px;\n    &:hover{\n        background-color: #157347;\n        border-color: #146c43;\n    }\n`\n\nconst TaskForm: React.FC = observer( () =>{\n    const [task, setTask] = useState({\n        id: Date.now(),\n        name :'',\n        type: '',\n        description: '',\n        date: '',\n        modal: false,\n    });\n\n\n    const [errors, setErrors] =useState<IErrors>({})\n\n    \n\n    const handleChange = (event:React.ChangeEvent<HTMLInputElement | HTMLSelectElement>)=>{\n        setTask(prev=>{\n            return{\n                ...prev,\n                [event.target.name]: event.target.value\n            }\n        })\n    \n    }\n\n    const handleSubmit = (event:React.FormEvent<HTMLFormElement>)=>{\n        event.preventDefault();\n        const errorsField = validateFields(task)\n        setErrors(errorsField)\n        \n        \n        if (!Object.keys(errorsField).length){\n            tasksData.addTask(task);\n            setTask({\n                id: Date.now(),\n                name :'',\n                type: '',\n                description: '',\n                date: '',\n                modal: false,\n            })\n            \n        }\n        \n        \n    }\n\n\n    return(\n        <StyledForm onSubmit = {handleSubmit} >\n            <StyledDiv>\n                <StyledInput \n                    type='text' \n                    name='name' \n                    placeholder='Name' \n                    value={task.name} \n                    onChange={handleChange} \n                    \n                    \n                />\n                {errors.name ?  <ErrorMassege errorText={errors.name}/> : null}\n            </StyledDiv>\n            <StyledDiv>\n                <StyledSelect \n                    name=\"type\" \n                    value={task.type} \n                    onChange={handleChange}>\n                    <option value=\"\" disabled>Choose an option</option>\n                    <option>new</option>\n                    <option>in-progress</option>\n                    <option>done</option>\n                </StyledSelect>\n                {errors.type && <ErrorMassege errorText={errors.type}/>}\n            </StyledDiv>\n            <StyledDiv>\n                <StyledInput \n                    type=\"text\" \n                    name=\"description\" \n                    value={task.description} \n                    id=\"description\" \n                    placeholder='Description' \n                    onChange={handleChange} \n                    \n                />\n            </StyledDiv>\n            <StyledDiv>\n                <StyledInput \n                    type=\"date\" \n                    name=\"date\" \n                    id=\"date\" \n                    value={task.date} \n                    onChange={handleChange}  \n                />\n            {errors.date && <ErrorMassege errorText={errors.date}/>}\n            </StyledDiv>\n            <StyledDiv>\n            <StyledCreateButton type='submit'>Create</StyledCreateButton>\n            </StyledDiv>\n        </StyledForm>\n    \n    )\n}\n)\nexport default TaskForm;","import React from \"react\";\nimport styled from 'styled-components'\n\ninterface IProps{\n    toggleDel: ()=>void;\n    toggleClose: ()=>void;\n}\n\n\nconst StyledModal = styled.div`\nbackground-color: #7aa3fa;\nborder: 1px solid black;\ndisplay: flex;\nflex-direction: column;\njustify-content: center;\nalign-items: center;\nfont-size: .7rem;\nheigth: 100%;\n`\n\nconst StyledText = styled.p`\nmargin:1px;\ncolor:#fff;\n`\n\nconst StyledDeleteButton = styled.button`\ncolor: #fff;\nbackground-color: #dc3545;\nborder-color: #dc3545;\nborder-radius: .25rem;\nfont-size: .7rem;\nmargin:1px;\n&:hover{\n    background-color: #bb2d3b;\n    border-color: #b02a37;\n    color:#fff;\n}\n`\nconst StyledCanselButton = styled.button`\ncolor: #000;\nfont-size: .7rem;\nmargin:1px;\nbackground-color: #fff;\nborder-color: #fff;\nborder-radius: .25rem;\n&:hover{\n    background-color: #d8d2d2;\n    border-color: #d8d2d2;\n    color:#000;\n}\n`\n\nconst ModalConfirmDelete = (props:IProps)=>{\n    return(\n        <StyledModal>\n            <StyledText>Want to delete?</StyledText>\n            <div>\n                <StyledDeleteButton onClick={()=>{props.toggleDel()}}>Delete</StyledDeleteButton>\n                <StyledCanselButton onClick={()=>{props.toggleClose()}}>Cancel</StyledCanselButton>\n            </div>\n        </StyledModal>\n    )\n}\n\nexport default ModalConfirmDelete;","import { observer } from \"mobx-react-lite\";\nimport React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport tasksData , { ITask } from \"../store/tasksData\";\nimport ErrorMassege from \"./ErrorMassege\";\nimport ModalConfirmDelete from \"./ModalConfirmDelete\";\nimport validateFields, { IErrors } from \"./validateFields\";\n\n\nconst StyledInput = styled.input`\n    font-size: .875rem;\n    border-radius: .2rem;\n    background-color: #fff;\n    border: 1px solid #ced4da;\n    width:90%;\n    height: 25px;\n`\n\nconst StyledSelect = styled.select`\n    font-size: .875rem;\n    border-radius: .2rem;\n    background-color: #fff;\n    border: 1px solid #ced4da;\n    width:90%;\n    height: 29px;\n`\n\nconst StyleEditedTask = styled.tr`\n    \n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    border: 1px solid black;\n    height:40px;\n    width:100%;\n    background-color: #c7d8ff;\n    align-items:center;\n\n`\n\nconst StyledSaveButton = styled.button`\n    color: #000;\n    background-color: #ffc107;\n    border-color: #ffc107;\n    border-radius: .25rem;\n    margin 5px;\n    height: 25px;\n    &:hover{\n        background-color: #ffca2c;\n        border-color: #ffc720;\n    }\n`\n\nconst StyledDeleteButton = styled.button`\n    color: #fff;\n    background-color: #dc3545;\n    border-color: #dc3545;\n    border-radius: .25rem;\n    margin 5px;\n    height: 25px;\n    &:hover{\n        background-color: #bb2d3b;\n        border-color: #b02a37;\n        color:#fff;\n    }\n`\n\ninterface IEditableTaskProps{\n    index: number;\n    task: ITask;\n    setHookId:()=>void;\n}\n\nconst EditableTask = observer( ({task,index,setHookId}:IEditableTaskProps)=>{\n    const [changeTask, setChangeTask] = useState(task)\n\n    const [errors, setErrors] =useState<IErrors>({})\n\n    function handleSave(event:React.MouseEvent<HTMLButtonElement>){\n        event.preventDefault()\n        const errorsField = validateFields(changeTask)\n        setErrors(errorsField)\n\n        if (!Object.keys(errorsField).length){\n            tasksData.changeTaskData(task.id, changeTask)\n            setHookId(); \n        }\n\n        \n    }\n\n    function handleChangedValue(event:React.ChangeEvent<HTMLInputElement | HTMLSelectElement>){\n        const cValue= event.target.value;\n        setChangeTask((prev) =>{\n            return{\n                ...prev,\n                [event.target.name]:cValue,\n            }\n        })\n    }\n\n\n    return (\n        <StyleEditedTask >\n            <td>{index+1}</td>\n            <td>\n                <StyledInput \n                    type='text' \n                    name='name' \n                    placeholder='Name' \n                    value={changeTask.name}  \n                    onChange={handleChangedValue}\n                />\n                {errors.name ?  <ErrorMassege errorText={errors.name}/> : null}\n            </td>\n            <td>\n                <StyledSelect \n                    name=\"type\" \n                    value={changeTask.type} \n                    onChange={handleChangedValue}\n                    \n                >\n                    <option value=\"\" disabled>Choose an option</option>\n                    <option>new</option>\n                    <option>in-progress</option>\n                    <option>done</option>\n                </StyledSelect>\n                {errors.type ?  <ErrorMassege errorText={errors.type}/> : null}\n            </td>\n            <td>\n                <StyledInput \n                    type=\"text\" \n                    name=\"description\" \n                    id=\"EditDescription\" \n                    placeholder='Description' \n                    value={changeTask.description} \n                    onChange={handleChangedValue}\n                    \n                />\n            </td>\n            <td>\n                <StyledInput \n                    type=\"date\" \n                    name=\"date\" \n                    id=\"date\" \n                    value={changeTask.date} \n                    onChange={handleChangedValue}\n                    \n                />\n                {errors.date ?  <ErrorMassege errorText={errors.date}/> : null}\n            </td>\n            <td><StyledSaveButton type='submit' onClick={handleSave} >Save</StyledSaveButton></td>\n            <td>\n                { task.modal ? <ModalConfirmDelete toggleDel = {()=>tasksData.removeTask(task.id)} toggleClose={()=>{tasksData.showModal(task.id)}}/> : <StyledDeleteButton onClick = {()=>{tasksData.showModal(task.id)}}>Delete</StyledDeleteButton> }\n            </td>\n        </StyleEditedTask>\n    )\n}\n)\nexport default EditableTask;\n\n","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport tasksData, { ITask } from \"../store/tasksData\";\nimport ModalConfirmDelete from \"./ModalConfirmDelete\";\n\nconst StyleTask = styled.tr`\n    display: grid;\n    width:100%;\n    height:40px;\n    grid-template-columns: repeat(7, 1fr);\n    border: 1px solid black;\n    align-items:center;\n    background-color: #c7d8ff;\n\n`\n\nconst StyledDeleteButton = styled.button`\n    color: #fff;\n    background-color: #dc3545;\n    border-color: #dc3545;\n    border-radius: .25rem;\n    margin 5px;\n    height: 25px;\n    &:hover{\n        background-color: #bb2d3b;\n        border-color: #b02a37;\n        color:#fff;\n    }\n`\nconst StyledEditButton = styled.button`\n    color: #fff;\n    background-color: #6c757d;\n    border-color: #6c757d;\n    border-radius: .25rem;\n    margin 5px;\n    height: 25px;\n    &:hover{\n        color: #fff;\n        background-color: #5c636a;\n        border-color: #565e64;\n    }\n`\ninterface ITaskReadOnlyProps {\n    index: number;\n    task:ITask;\n    handleEditId: ()=>void;\n}\n\n\n\nconst TaskReadOnly = observer( ({index,task, handleEditId}:ITaskReadOnlyProps)=>{\n    return(\n            <StyleTask >\n                    <td>{index+1}</td>\n                    <td>{task.name}</td>\n                    <td>{task.type}</td>\n                    <td>{task.description}</td>\n                    <td>{task.date}</td>\n                    <td><StyledEditButton onClick={handleEditId}>Edit</StyledEditButton></td>\n                    <td>\n                        { task.modal ? <ModalConfirmDelete toggleDel = {()=>tasksData.removeTask(task.id)} toggleClose={()=>{tasksData.showModal(task.id)}}/> : <StyledDeleteButton onClick = {()=>{tasksData.showModal(task.id)}}>Delete</StyledDeleteButton> }\n                    </td>\n            </StyleTask>\n    )\n}\n)\nexport default TaskReadOnly;","import React, { useState } from \"react\";\nimport tasksData, { ITask } from \"../store/tasksData\";\nimport styled from \"styled-components\";\nimport { observer } from \"mobx-react-lite\";\nimport EditableTask from \"./EditableTask\";\nimport TaskReadOnly from \"./TaskReadOnly\";\n\nconst StyleHeader = styled.tr`\n    width: 100%;\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    border: 1px solid black;\n    box-sizing: bprder-box;\n    background-color: #7ba3fb;\n\n`\n\nconst StyledTable = styled.table`\nwidth:90%;\nmargin:auto;\n`\n\nconst Tasks: React.FC = observer( () =>{\n    const [editableId, setEditableId] = useState(-1)\n\n    function handleEditId(task:ITask){\n        setEditableId(task.id);\n    }\n\n return(\n     <StyledTable>\n        <thead>\n            <StyleHeader>\n                <td>id </td>\n                <td>Name</td>\n                <td>Type</td>\n                <td>Description</td>\n                <td>Date</td>\n                <td>Edit</td>\n                <td>Delete</td>\n            </StyleHeader>\n        </thead>\n        {tasksData.tasksData.map((task,index) =>{\n            return(\n                <tbody key={index}>\n                { editableId === task.id ? (<EditableTask  index={index} task={task}  setHookId ={()=>setEditableId(-1)}/>): (<TaskReadOnly  index = {index} task={task} handleEditId= {()=>handleEditId(task)} /> )}\n                </tbody>\n            )\n        })}\n     </StyledTable>\n     \n )\n}\n)\nexport default Tasks;","import React from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport Tasks from './components/Tasks';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Tasks Manager</h1>\n      <TaskForm />\n      <Tasks />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}